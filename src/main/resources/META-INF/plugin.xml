<idea-plugin>
    <id>zio.intellij.zio-intellij</id>
    <name>ZIO for IntelliJ</name>
    <vendor>The ZIO Maintainers</vendor>
    <version>replaced-by-build</version>

    <description><![CDATA[
        Suggestions, refactorings, and other enhancements for the ZIO library ecosystem.
        The plugin enhances ZIO with features, such as:
        <ul>
        <li>Refactorings and suggestions</li>
        <li>Support for zio-macros (e.g. <code>@accessible</code>)</li>
        <li>Integrated test runner</li>
        <li>And much more!</li>
        </ul>

        Contribute to the plugin at <a href="https://github.com/zio/zio-intellij">https://github.com/zio/zio-intellij</a>
        ]]></description>

    <change-notes>replaced-by-build</change-notes>

    <idea-version since-build="201.1" until-build="201.*"/>

    <depends>org.intellij.scala</depends>
    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.lang</depends>

    <extensions defaultExtensionNs="org.intellij.scala">
        <syntheticMemberInjector implementation="zio.intellij.synthetic.macros.ModulePatternAccessible"/>
    </extensions>

    <extensions defaultExtensionNs="com.intellij">
        <!-- simplifications -->
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyUnitInspection"
                         displayName="Simplify returning Unit to .unit" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyUnitInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyIgnoreInspection"
                         displayName="Simplify recovering with Unit to .ignore" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyIgnoreInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyMapInspection"
                         displayName="Simplify discarding effect result to .as/.orElseFail" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyMapInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyBimapInspection"
                         displayName="Simplify mapping result and error effects to .bimap" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyBimapInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyWhenInspection"
                         displayName="Simplify condition to .when" groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyWhenInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifySucceedOptionInspection"
                         displayName="Simplify optional values to .none/.some" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifySucceedOptionInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyCollectAllInspection"
                         displayName="Simplify collection of effects obtained by mapping each element of some Iterable to foreach"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyCollectAllInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyTapInspection"
                         displayName="Simplify various call chains with .tap"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyTapInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyExitCodeInspection"
                         displayName="Simplify producing an exit code"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyExitCodeInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifySleepInspection"
                         displayName="Simplify ZIO.sleep to .delay" groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifySleepInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyServiceInspection"
                         displayName="Simplify ZIO.access(_.get) with ZIO.service"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyServiceInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.UnusedZIOExpressionsInspection"
                         displayName="Detects unused ZIO expressions that are mistakenly used like statements"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="UnusedZIOExpressionsInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.WrapInsteadOfLiftInspection"
                         displayName="Detects Future, Try, Option, and Either mistakenly wrapped in ZIO instead of using the ZIO.from* functions"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="WrapInsteadOfLiftInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>


        <localInspection implementationClass="zio.intellij.inspections.mistakes.YieldingZIOEffectInspection"
                         displayName="Detects if a value returned from the yield part of a for comprehension is explicitly wrapped in a ZIO effect"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="YieldingZIOEffectInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.NothingInContravariantPositionInspection"
                         displayName="Detects Nothing being used in the contravariant position in a ZIO effect"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="NothingInContravariantPositionInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <intentionAction>
            <category>ZIO/Suggestions</category>
            <className>zio.intellij.intentions.suggestions.SuggestTypeAlias</className>
        </intentionAction>

        <!-- test runner -->
        <configurationType implementation="zio.intellij.testsupport.ZTestConfigurationType"/>
        <runConfigurationProducer implementation="zio.intellij.testsupport.ZTestRunConfigurationProducer"/>
        <runLineMarkerContributor implementationClass="zio.intellij.testsupport.ZTestRunLineMarkerProvider"
                                  language="Scala" order="first"/>
        <testFramework implementation="zio.intellij.testsupport.ZTestFramework" order="first"/>
    </extensions>

    <actions>
        <!-- Add your actions here -->
    </actions>
</idea-plugin>
