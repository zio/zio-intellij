<idea-plugin>
    <id>zio.intellij.zio-intellij</id>
    <name>ZIO for IntelliJ</name>
    <vendor>The ZIO Maintainers</vendor>

    <description>
        <![CDATA[
        Suggestions, refactorings, and other enhancements for the ZIO library ecosystem.
        The following features are available:
        <ul>
        <li>Refactorings and suggestions</li>
        <li>Support for zio-macros (e.g. <code>@accessible</code>)</li>
        <li>Test runner</li>
        <li>And much more!</li>
        </ul>

        Contribute to the plugin at <a href="https://github.com/zio/zio-intellij">https://github.com/zio/zio-intellij</a>
      ]]>

    </description>

    <idea-version since-build="193.5233.102"/>

    <depends>org.intellij.scala</depends>
    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.lang</depends>

    <extensions defaultExtensionNs="org.intellij.scala">
        <syntheticMemberInjector implementation="zio.intellij.synthetic.macros.ModulePatternAccessible"/>
    </extensions>

    <extensions defaultExtensionNs="com.intellij">
        <!-- simplifications -->
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyUnitInspection"
                         displayName="Simplify returning Unit to .unit" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyUnitInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyIgnoreInspection"
                         displayName="Simplify recovering with Unit to .ignore" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyIgnoreInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyAsInspection"
                         displayName="Simplify discarding effect result to .as/.asError" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyAsInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyBimapInspection"
                         displayName="Simplify mapping result and error effects to .bimap" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyBimapInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyWhenInspection"
                         displayName="Simplify condition to .when" groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyWhenInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifySucceedOptionInspection"
                         displayName="Simplify optional values to .none/.some" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifySucceedOptionInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyCollectAllInspection"
                         displayName="Simplify collection of effects obtained by mapping each element of some Iterable to foreach"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyCollectAllInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <!-- deprecations-->
        <localInspection implementationClass="zio.intellij.inspections.deprecations.DeprecatedTraverseInspection"
                         displayName="Replace deprecated traverse methods with foreach"
                         groupPath="Scala,ZIO"
                         groupName="Migrations"
                         shortName="DeprecatedTraverseInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>
        <localInspection implementationClass="zio.intellij.inspections.deprecations.DeprecatedAssertInspection"
                         displayName="Replace deprecated assert methods with new syntax"
                         groupPath="Scala,ZIO"
                         groupName="Migrations"
                         shortName="DeprecatedAssertInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <intentionAction>
            <category>ZIO/Suggestions</category>
            <className>zio.intellij.intentions.suggestions.SuggestTypeAlias</className>
        </intentionAction>

        <intentionAction>
            <category>ZIO/Migrations</category>
            <className>zio.intellij.intentions.migrations.MigrateTestSuiteToSpecField</className>
        </intentionAction>
        
        <!-- test runner -->
        <configurationType implementation="zio.intellij.testsupport.ZTestConfigurationType"/>
        <runConfigurationProducer implementation="zio.intellij.testsupport.ZTestRunConfigurationProducer"/>
        <runLineMarkerContributor implementationClass="zio.intellij.testsupport.ZTestRunLineMarkerProvider"
                                  language="Scala" order="first"/>
        <testFramework implementation="zio.intellij.testsupport.ZTestFramework" order="first"/>

    </extensions>

    <actions>
        <!-- Add your actions here -->
    </actions>
</idea-plugin>