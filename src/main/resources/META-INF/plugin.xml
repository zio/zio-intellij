<idea-plugin>
    <id>zio.intellij.zio-intellij</id>
    <name>ZIO for IntelliJ</name>
    <vendor>The ZIO Maintainers</vendor>
    <version>replaced-by-build</version>

    <description><![CDATA[
        Suggestions, refactorings, and other enhancements for Scala's <a href="https://zio.dev/">ZIO</a> ecosystem.
        The plugin enhances the ZIO library with features, such as:
        <ul>
        <li>Refactorings and suggestions</li>
        <li>Support for zio-macros (e.g. <code>@accessible</code>)</li>
        <li>Integrated test runner</li>
        <li>And much more!</li>
        </ul>
        <br/>
        Contribute to the plugin at <a href="https://github.com/zio/zio-intellij">https://github.com/zio/zio-intellij</a>
        ]]></description>

    <change-notes>replaced-by-build</change-notes>

    <idea-version since-build="231" until-build="231.*"/>

    <depends>org.intellij.scala</depends>
    <depends>com.intellij.modules.java</depends>
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.lang</depends>

    <extensions defaultExtensionNs="org.intellij.scala">
        <syntheticMemberInjector implementation="zio.intellij.synthetic.macros.ModulePatternAccessible"/>
        <syntheticMemberInjector implementation="zio.intellij.synthetic.macros.ModulePatternAccessibleM"/>
        <syntheticMemberInjector implementation="zio.intellij.synthetic.macros.ModulePatternAccessibleMM"/>
        <syntheticMemberInjector implementation="zio.intellij.synthetic.macros.MockableInjector"/>
    </extensions>

    <applicationListeners>
        <listener topic="com.intellij.openapi.project.ProjectManagerListener"
                  class="zio.intellij.testsupport.zio1.runner.TestRunnerProjectListener"/>
    </applicationListeners>

    <extensions defaultExtensionNs="com.intellij">
        <!-- simplifications -->
        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyUnitInspection"
                         displayName="Simplify returning Unit to .unit" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyUnitInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyIgnoreInspection"
                         displayName="Simplify recovering with Unit to .ignore" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyIgnoreInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyMapInspection"
                         displayName="Simplify discarding effect result to .as/.orElseFail" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyMapInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyMapBothInspection"
                         displayName="Simplify mapping result and error effects to .mapBoth" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyMapBothInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyWhenInspection"
                         displayName="Simplify condition to .when" groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyWhenInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyUnlessInspection"
                         displayName="Simplify condition to .unless" groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyUnlessInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifySucceedEitherInspection"
                         displayName="Simplify Either values to .left/.right" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifySucceedEitherInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifySucceedOptionInspection"
                         displayName="Simplify optional values to .none/.some" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifySucceedOptionInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyCollectAllInspection"
                         displayName="Simplify collection of effects obtained by mapping each element of some Iterable to foreach"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyCollectAllInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyTapInspection"
                         displayName="Simplify various call chains with .tap"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyTapInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyExitCodeInspection"
                         displayName="Simplify producing an exit code"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyExitCodeInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifySleepInspection"
                         displayName="Simplify ZIO.sleep to .delay" groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifySleepInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyServiceInspection"
                         displayName="Simplify ZIO.access(_.get) with ZIO.service"
                         groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyServiceInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

<!--        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyServiceWithInspection"-->
<!--                         displayName="Simplify ZIO.accessM with ZIO.serviceWith"-->
<!--                         groupPath="Scala,ZIO"-->
<!--                         groupName="Simplifications"-->
<!--                         shortName="SimplifyServiceWithInspection" level="WEAK WARNING"-->
<!--                         enabledByDefault="true" language="Scala"/>-->

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyChainToForInspection"
                         displayName="Convert `*>` chain to for-comprehension and vice versa"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyChainToForInspection" level="INFORMATION"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyToLayerInspection"
                         displayName="Simplify ZLayer.fromEffect(Many) to .toLayer(Many)"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyToLayerInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyZipRightToSucceedInspection"
                         displayName="Simplify `*&gt; ZIO.succeed` to `.as`"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyZipRightToSucceedInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifySucceedToZipLeftInspection"
                         displayName="Simplify `ZIO.succeed &lt;*` to `.as`"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifySucceedToZipLeftInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.UnusedZIOExpressionsInspection"
                         displayName="Detects unused ZIO expressions that are mistakenly used like statements"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="UnusedZIOExpressionsInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.WrapInsteadOfLiftInspection"
                         displayName="Detects Future, Try, Option, and Either mistakenly wrapped in ZIO instead of using the ZIO.from* functions"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="WrapInsteadOfLiftInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.YieldingZIOEffectInspection"
                         displayName="Detects if a value returned from the yield part of a for comprehension is explicitly wrapped in a ZIO effect"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="YieldingZIOEffectInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.NothingInContravariantPositionInspection"
                         displayName="Detects Nothing being used in the contravariant position in a ZIO effect"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="NothingInContravariantPositionInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyZipRightInspection"
                         displayName="Simplify discarding effect result to .zipRight/*&gt;" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyZipRightInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyZipLeftInspection"
                         displayName="Simplify discarding effect result to .zipLeft/&lt;*" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyZipLeftInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyForeachInspectionZIO1"
                         displayName="Simplify .foreach by discarding unused result thus slightly improving performance"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyForeachInspectionZIO1" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyForeachInspectionZIO2"
                         displayName="Simplify .foreach by discarding unused result thus slightly improving performance"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyForeachInspectionZIO2" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.IfGuardInsteadOfWhenInspection"
                         displayName="Detects if guards mistakenly used in for-comprehension on ZIO effect causing NoSuchElementException."
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="IfGuardInsteadOfWhenInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyFailInspection"
                         displayName="Simplify ZIO.fail.orDie to ZIO.die"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyFailInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyFlattenInspection"
                         displayName="Replace .map and .flatten with .flatMap" groupPath="Scala,ZIO"
                         groupName="Simplifications"
                         shortName="SimplifyFlattenInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyOrElseInspection"
                         displayName="Simplify .orElse(ZIO.fail) to .orElseFail"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyOrElseInspection" level="WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyBuildUseInspection"
                         displayName="Simplify .build.use to .provideLayer"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyBuildUseInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.InfallibleEffectRecoveryInspection"
                         displayName="Effect cannot fail; operation on error is impossible"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="InfallibleEffectRecoveryInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyErrorModificationInspection"
                         displayName="Simplify expression by discarding operation on error since effect cannot fail"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyErrorModificationInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyErrorRecoveryInspection"
                         displayName="Simplify expression by discarding recovery since effect cannot fail"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyErrorRecoveryInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyErrorSeparationInspection"
                         displayName="Simplify expression by discarding operation on error since effect cannot fail"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyErrorSeparationInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.simplifications.SimplifyAssertInspection"
                         displayName="Simplify complex ZIO Test assertions"
                         groupPath="Scala,ZIO" groupName="Simplifications"
                         shortName="SimplifyAssertInspection" level="WEAK WARNING"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.suggestions.SuggestTypeAliasInspection"
                         displayName="Choose a more specific type alias"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="SuggestTypeAliasInspection" level="INFORMATION"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.UnnecessaryEnvProvisionInspection"
                         displayName="Effect doesn't require environment; there is no need to provide it"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="UnnecessaryEnvProvisionInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.macros.ProvideMacroInspection"
                         displayName="There were issues while constructing a layer"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="ProvideMacroInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.IncorrectTestClassInspection"
                         displayName="Detects incorrect use of 'class' instead of 'object' for ZIO Tests specs"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="IncorrectTestClassInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <localInspection implementationClass="zio.intellij.inspections.mistakes.IncorrectPreludeNewTypeAliasInspection"
                         displayName="Detects erroneous use of 'Foo.type' instead of 'Foo.Type' for ZIO Prelude's Newtypes"
                         groupPath="Scala,ZIO" groupName="Inspections"
                         shortName="IncorrectPreludeNewTypeAliasInspection" level="ERROR"
                         enabledByDefault="true" language="Scala"/>

        <intentionAction>
            <category>ZIO/Suggestions</category>
            <className>zio.intellij.intentions.suggestions.SuggestTypeAlias</className>
        </intentionAction>

        <codeInsight.lineMarkerProvider implementationClass="zio.intellij.gutter.ForkedCodeLineMarkerProvider"
                                        language="Scala"/>

        <referencesSearch implementation="zio.intellij.searchers.ZioAccessorUsagesSearcher"/>

        <!-- test support -->
        <testFramework implementation="zio.intellij.testsupport.Zio1TestFramework" />
        <testFramework implementation="zio.intellij.testsupport.Zio2TestFramework" />

        <configurationType implementation="zio.intellij.testsupport.ZTestConfigurationType"/>

        <runConfigurationProducer implementation="zio.intellij.testsupport.ZTestRunConfigurationProducer"/>
        <runLineMarkerContributor implementationClass="zio.intellij.testsupport.ZTestRunLineMarkerProvider"
                                  language="Scala" order="first"/>



        <notificationGroup id="Test Runner Download" displayType="BALLOON" isLogByDefault="true"/>
        <notificationGroup id="Test Runner Download Error" displayType="STICKY_BALLOON" isLogByDefault="true"/>

        <projectService serviceImplementation="zio.intellij.testsupport.zio1.runner.TestRunnerResolveService" />

        <testCreator language="Scala" implementationClass="zio.intellij.testsupport.ZTestCreator" order="first" />

        <!-- Project template -->
        <projectTemplatesFactory implementation="zio.intellij.project.ZioProjectTemplateFactory" order="last"/>

        <!-- debugging -->
        <debuggerClassFilterProvider implementation="zio.intellij.debugger.ZioSteppingFilterProvider"/>

        <errorHandler implementation="zio.intellij.ErrorReporter"/>

        <!-- temporary disabled until I can figure out how to disable on invalid items
        <customLiveTemplate implementation="zio.intellij.postfix.ZPostfixLiveTemplateHack" />
        !-->

        <!-- Live Templates -->
        <defaultLiveTemplates file="/liveTemplates/zio.xml"/>
    </extensions>

</idea-plugin>
